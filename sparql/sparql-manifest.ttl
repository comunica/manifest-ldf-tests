@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf:     <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix qt:     <http://www.w3.org/2001/sw/DataAccess/tests/test-query#> .
@prefix et:     <https://comunica.github.io/ontology-query-testing/ontology-query-testing.ttl#> .
@prefix :       <https://comunica.github.io/manifest-ldf-tests/sparql/sparql-manifest.ttl#> .

<>  rdf:type mf:Manifest ;
  rdfs:label "SPARQL query library" ;
  mf:entries
  ( 
  :directors01
  :software02
  :simple03
  :common04
  :missing05
  :schrodinger06
  :extends07
  :belgium08
  :300triples09
  :annepubs10
  :emptybgp
  :employees
  :starwars-valuesbind
  :wws-unionfilter
  :empty-group
  :optional-filter-exists
  :willis-product
  ) .

:directors01 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - DBpedia TPF" ;
  rdfs:comment "Directors of movies starring Brad Pitt" ;
  mf:action
        [ qt:query  <directors01.rq> ;
          et:mockFolder <directors01> ] ;
  et:dataSources(
    [ et:source <https://fragments.dbpedia.org/2016-04/en> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <directors01/result.srj> . 
  
:software02 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - DBpedia TPF" ;
  rdfs:comment "Belgian software" ;
  mf:action
        [ qt:query  <software02.rq> ;
          et:mockFolder <software02> ] ;
  et:dataSources(
    [ et:source <https://fragments.dbpedia.org/2016-04/en> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <software02/result.srj> . 

:simple03 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - DBPedia TPF & SPARQL" ;
  rdfs:comment "Simple bindings with the city 'Aalter' as object" ;
  mf:action
        [ qt:query  <simple03.rq> ;
          et:mockFolder <simple03> ] ;
  et:dataSources (
    [ et:source <https://dbpedia.org/sparql> ;
      et:sourceType et:SPARQL ] ) ;
  mf:result  <simple03/result.srj> .

:common04 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - DBPedia TPF & Ruben(s)' FILE" ;
  rdfs:comment "All common interests of Ruben V and Ruben T" ;
  mf:action
        [ qt:query  <common04.rq> ;
          et:mockFolder <common04> ] ;
  et:dataSources (
    [ et:source <https://fragments.dbpedia.org/2016-04/en> ;
      et:sourceType et:TPF ]
    [ et:source <common04_static/rubent.html> ;
      et:sourceType et:File ]
    [ et:source <common04_static/rubenv.ttl> ;
      et:sourceType et:File ] ) ;
  mf:result  <common04/result.srj> .

:missing05 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - DBPedia TPF" ;
  rdfs:comment "The missing link between Vermeersch and Mortier" ;
  mf:action
        [ qt:query  <missing05.rq> ;
          et:mockFolder <missing05> ] ;
  et:dataSources (
    [ et:source <https://data.linkeddatafragments.org/ugent-biblio> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <missing05/result.srj> .

:schrodinger06 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "ASK - DBPedia TPF" ;
  rdfs:comment "Erwin Schr√∂dinger working at Ghent University" ;
  mf:action
        [ qt:query  <schrodinger06.rq> ;
          et:mockFolder <schrodinger06> ] ;
  et:dataSources (
    [ et:source <https://fragments.dbpedia.org/2016-04/en> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <schrodinger06/result.srj> .

:extends07 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - LOV TPF" ;
  rdfs:comment "All classes extending dcat:Dataset" ;
  mf:action
        [ qt:query  <extends07.rq> ;
          et:mockFolder <extends07> ] ;
  et:dataSources (
    [ et:source <https://data.linkeddatafragments.org/lov> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <extends07/result.srj> .

:belgium08 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT, OPTIONAL - Geonames TPF" ;
  rdfs:comment "All countryCodes of places named 'Belgium'" ;
  mf:action
        [ qt:query  <belgium08.rq> ;
          et:mockFolder <belgium08> ] ;
  et:dataSources (
    [ et:source <https://data.linkeddatafragments.org/geonames> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <belgium08/result.srj> .

:300triples09 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - DBpedia TPF" ;
  rdfs:comment "300 triples in DBpedia" ;
  mf:action
        [ qt:query  <300triples09.rq> ;
          et:mockFolder <300triples09> ] ;
  et:dataSources (
    [ et:source <https://fragments.dbpedia.org/2016-04/en> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <300triples09/result.srj> .

:annepubs10 rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - Biblio TPF" ;
  rdfs:comment "Publications by Anne De Paepe" ;
  mf:action
        [ qt:query  <annepubs10.rq> ;
          et:mockFolder <annepubs10> ] ;
  et:dataSources (
    [ et:source <https://data.linkeddatafragments.org/ugent-biblio> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <annepubs10/result.srj> .

:emptybgp rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - BOW Empty" ;
  rdfs:comment "A simple BGP with two patterns that produces no results" ;
  mf:action
        [ qt:query  <emptybgp.rq> ;
          et:mockFolder <emptybgp> ] ;
  et:dataSources (
    [ et:source <https://data.betweenourworlds.org/latest> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <emptybgp/result.srj> .

:employees rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - Employee profiles" ;
  rdfs:comment "Federated query to retrieve basic information from multiple employees" ;
  mf:action
        [ qt:query  <employees.rq> ;
          et:mockFolder <employees> ] ;
  et:dataSources (
    [ et:source <employees_static/bendm.html> ;
      et:sourceType et:File ]
    [ et:source <employees_static/brechtvdv.ttl> ;
      et:sourceType et:File ]
    [ et:source <employees_static/erikm.ttl> ;
      et:sourceType et:File ]
    [ et:source <employees_static/geraldh.ttl> ;
      et:sourceType et:File ]
    [ et:source <employees_static/harm.ttl> ;
      et:sourceType et:File ]
    [ et:source <employees_static/office.ttl> ;
      et:sourceType et:File ]
    [ et:source <employees_static/pieterh.ttl> ;
      et:sourceType et:File ]
    [ et:source <employees_static/rubent.html> ;
      et:sourceType et:File ]
    [ et:source <employees_static/rubenv.ttl> ;
      et:sourceType et:File ]
    [ et:source <employees_static/svenl.ttl> ;
      et:sourceType et:File ] ) ;
  mf:result  <employees/result.srj> .

:starwars-valuesbind rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - Star Wars with VALUES and BIND" ;
  rdfs:comment "Non-trivial join with VALUES and BIND" ;
  mf:action
        [ qt:query  <starwars-valuesbind.rq> ;
          et:mockFolder <starwars-valuesbind> ] ;
  et:dataSources (
    [ et:source <starwars-valuesbind_static/starwars.ttl> ;
      et:sourceType et:File ] ) ;
  mf:result  <starwars-valuesbind/result.srj> .

:wws-unionfilter rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - WWS with UNION and FILTER" ;
  rdfs:comment "Non-trivial join with UNION and FILTER" ;
  mf:action
        [ qt:query  <wws-unionfilter.rq> ;
          et:mockFolder <wws-unionfilter> ] ;
  et:dataSources (
    [ et:source <wws-unionfilter_static/wws.ttl> ;
      et:sourceType et:File ] ) ;
  mf:result  <wws-unionfilter/result.srj> .

:empty-group rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - GROUP BY over empty dataset" ;
  rdfs:comment "A GROUP BY, ORDER BY over no triples" ;
  mf:action
        [ qt:query  <empty-group.rq> ;
          et:mockFolder <empty-group> ] ;
  et:dataSources (
    [ et:source <empty-group_static/empty.ttl> ;
      et:sourceType et:File ] ) ;
  mf:result  <empty-group/result.srj> .

:optional-filter-exists rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - OPTIONAL FILTER EXISTS" ;
  rdfs:comment "FILTER EXISTS works within an OPTIONAL block" ;
  mf:action
        [ qt:query  <optional-filter-exists.rq> ;
          et:mockFolder <optional-filter-exists> ] ;
  et:dataSources (
    [ et:source <optional-filter-exists_static/2triples.ttl> ;
      et:sourceType et:File ] ) ;
  mf:result  <optional-filter-exists/result.srj> .

:willis-product rdf:type et:LdfQueryEvaluationTest ;
  mf:name    "SELECT - DBpedia TPF Bruce Willis product" ;
  rdfs:comment "Spouses and children of Bruce Willis with a cartesian product" ;
  mf:action
        [ qt:query  <willis-product.rq> ;
          et:mockFolder <willis-product> ] ;
  et:dataSources(
    [ et:source <https://fragments.dbpedia.org/2016-04/en> ;
      et:sourceType et:TPF ] ) ;
  mf:result  <willis-product/result.srj> . 